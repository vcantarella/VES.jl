name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1.11'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      
      # Setup Pixi for PyGIMLi testing environment
      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.49.0
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          manifest-path: test/test_ves/pixi.toml
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      
      # Debug: Check pixi environment
      - name: Debug pixi environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of test directory:"
          ls -la test/
          echo "Contents of test/test_ves directory:"
          ls -la test/test_ves/
          echo "Pixi info:"
          pixi info
          echo "Python executable from pixi:"
          which python || echo "python not found in PATH"
          echo "Python version:"
          python --version || echo "python command failed"
          echo "PyGIMLi check:"
          python -c "import pygimli; print(f'PyGIMLi version: {pygimli.__version__}')" || echo "PyGIMLi import failed"
      
      - uses: julia-actions/julia-runtest@v1
